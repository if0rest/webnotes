---------------------------------------------------------
	БАЗЫ ДАННЫХ
---------------------------------------------------------

• SQL - это стандартный язык получения данных из БД и управления ею. Применяется для создания, извлечения, обновления и обработки данных в СУБД. ВНЕШНИЙ КЛЮЧ - это колонка в 1 таблице, кот. ссылается на ряд в другой.
• СУБД - это то, что позволяет взаимодействовать с БД. Она расшифровывает SQL-запрос и производит описанные в нем операции с данными.
• БД - это набор таблиц, каждая из кот. содержит набор связанных данных.
• ТАБЛИЦЫ - это набор данных, организованных как строки и столбцы. Таблицы мб связаны отношениями с др. таблицами.
• PHPmyAdmin - веб-интерфейс для администрирования СУБД.
• CMS - система, помогающая управлять созданием, публикацией и архивацией контента сайта.

'БД' - набор сведений, хранящихся некоторым упорядоченным способом.
'СУБД' - это совокупность языковых и программных средств, кот. осуществляет доступ к данным, позволяет их создавать, менять, удалять, обеспечивает безопасность данных и т.д.
'SQL' - язык структурированных запросов, основной задачей кот. явл. предоставление простого способа считывания и записи инфы в БД.
"В СУБД информация представлена в виде таблиц, строки кот. называются записями, а ячейки - полями. При создании таблицы необ. указать список полей и их типы. В каждой СУБД кол-во типов разнится."


БД - совокупность взаимосвязанных данных, сохраняемая в 2-мерных таблицах. БД представляет собой организованный набор таблиц, где каждая ТАБЛИЦА - неупорядоченный массив из однородных элементов (ЗАПИСЕЙ). Каждая запись может содержать 1 или неск. именовынных полей. Каждое ПОЛЕ содержит опр. тип данных.
Для получения инфы из БД надо отправить SQL-запрос, после чего получим таблицу с нужными значениями.
SQL позволяет делать выборку данных - извлекать инфу из БД, организацию данных - устаналвивать структуру и отношения между элементами БД (зависимости), обработка данных (добавление, извлечение, обновление, удаление).

PDO
--------------------------------------------
try {
	$conn = new PDO('mysql:host=localhost; dbname=myDB', 'root', 'pass');
	echo 'Connection successfully!';
} catch (PDOException $e) {
	echo 'Connection failed: ' . $e.getMessage();
}
--------------------------------------------
$host = '127.0.0.1';	$db   = 'test';
$user = 'root';		$pass = '';
$charset = 'utf8';
$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$opt = [
	PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
	PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
	PDO::ATTR_EMULATE_PREPARES   => false,
];
$pdo = new PDO($dsn, $user, $pass, $opt);


---------------------------------------------------------
	CSS, АДАПТИВКА
---------------------------------------------------------

АДАПТИВНЫЙ ДИЗАЙН - это стек техник и концепций по вертске и дизайну, обеспечивающий корректное отображение сайта на разных устройствах.

Подключение media-query в HTML:
	<link rel="stylesheet" href="responsive.css" media="(min-width:400px) and (max-width:900px)">
	И в CSS:
	@media only screen and (max-width: 610px){}
	@media (min-width: 600px) and (max-width: 980px){}	// если экран будет < 600px, то применятся след. стили.

Отвечает за отображение страницы на моб.устройствах.
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

ПРАВИЛО ВЕРТИКАЛЬНЫХ ОТСТУПОВ:

Вертикальный margin между элементами равен max margin 1 из элементов.

"Мы тому элементу, из кот. утекают маржины, ставим overflow:hidden вместо border, и все тановится норм. Это допустимое боевое решение".
<!> Свойством 'overflow:hidden' мы запрещаем детям выходить за пределы родителя. Родитель растягивается, дабы не выпустить.

Чтобы растянуть родитель, у которого дети с float, допиши ему класс:
.clearfix::after {
	content: "";
	display: block;
	clear: both;
}

FlexBox позволяет делать классную адаптивку без медиа-запросов.


---------------------------------------------------------
	PHP
---------------------------------------------------------

В PHP для передачи данных массива клиенту исп. 'serialize()' или 'json_encode', кот. преобразует [] в строку.

Для отправки формы вместо нативной функции mail() можно (нужно!) исп. крутую и надежную библиотеку PHPMailer.

base64() - это шифрование, не кодирование.

---------------------------------------------------------
	УМНОСТИ ОТ ЛАВРИКА
---------------------------------------------------------

Если сайт динамический, Апач принимает http-запрос, отдает его php-интерпретатору, БД отрабатывает, все крутится-вертится, а на выходе - html.

Сначала строится DOM-дерево, после рендерится страница.

Весь JS работает таким образом: мы в браузере цепляемся к событиям, кот. есть у объектов, и при наступлении этих событий мы меняем с помощью методов свойства объекта.



---------------------------------------------------------
	JS
---------------------------------------------------------

ПЕРЕМЕННАЯ - ячейка памяти, хранящая единицу информации.

ОБЪЕКТ - это контейнер ключей и свойств. Удобны для хранения и организации данных. В них можно вкладывать др. объекты, получая полезные древовидные структуры.

ФУНКЦИЯ - это конструкция, кот. позволяет неск. раз исп. 1 и тот же кусок кода.

CALLBACK - когда нужно выполнить функцию в ответ на к-то событие.

ЗАМЫКАНИЕ - функция+ее лексическое окружение на момент создания. Лекс. окр. - это множество var, кот. опр. вне функции.

ЦЕПОЧКА ОБЛАСТЕЙ ВИДИМОСТИ - если вы запрашиваете var, кот. нет в локальной области видимости, парсер будет искать ее во внешней, а затем в глобальной областя видимости.

JS, если на пальцах, - это язык программирования браузера.
Как работает браузер?
Браузер загружает html-файл с сервера, парсит его, преобразуя html в дерево; html - вложенная структура тегов, браузер анализирует ее и строит дерево - DOM (DOM - объектное представление html). Потом он отрисовывает/рендерит дерево на экране в соответствии с CSS. Затем он позволяет пользователю что-то делать. Так вот, JS исп., чтобы изменить этот DOM. Если вы меняете это дерево налету, без перезагрузки страницы, браузер перерисовывает ее. Кроме того, браузер перехватывает действия пользователя и генерирует события. Когда браузер что-то делает, браузер вызывает обраотчики, привязанные к конкретному элементу дерева. Например, submit в форме.

this указывает на тот элемент, на кот. сработало событие.

JS в браузере однопоточный, поэтому функции выполняются последовательно, строго по очереди.

document- это самый верхний DOM-элемент, свойство объекта window.


---------------------------------------------------------
	AJAX
---------------------------------------------------------

AJAX - набор технологий (JS+PHP+HTML+CSS), обеспечивающий взаимодействие клиента с сервером без перезагрузки страницы.

Суть AJAX - фоновой запрос на сервер и подгрузка данных без перезагрузки страницы.

"Форма была заполнена на стороне клиента, но обработать форму может только сервер: для этого нужен серверный язык, чтобы сохранить данные в базу, отправить админу на почту и прочее."

"У нас идет точно такой же запрос на сервер, но средствами JS: встроенного объект XMLHttpRequest()".

Чтобы сделать AJAX-запрос, нужен HTTP-протокол и серверный язык на сервере. JS по протоколу HTTP посылает запрос на сервер, на сервере PHP формирует ответ, отдает на сторону клиента, и клиент отображает их средствами HTML и CSS.

В некоторых приложениях AJAX вытесняется Сокетами. AJAX - это пинг-понг ЗАПРОС-ОТВЕТ, а сокеты - прямой канал.

XML - это разметка с помощью тегов. Исп. в вебе, json и jsonp. Это форматы для описания древовидной структуры данных в JS и не только в нем.

AJAX
"Форма была заполнена на стороне клиента, но обрабтать форму может только сервер: для этого нужен серверный язык, чтобы сохранить данные в базу, отправить админу на почту и прочее."
"У нас идет точно такой же запрос на сервер, но средствами JS: встроенного объект XMLHttpRequest(). "
Суть AJAX - фоновой запрос на сервер и подгрузка данных без перезагрузки страницы.
AJAX - не технология, на нем нельзя писать сайты. Это набор технологий (JS+PHP+HTML+CSS), обеспечивающий взаимодействие клиента и сервера.
Чтобы сделать AJAX-запрос, нужен HTTP-протокол и серверный язык на сервере.
"JS по протоколу HTTP посылает запрос на сервер. На сервере PHP формирует ответ с новыми комментами и новостями, отдает на сторону клиента, и клиент отображает их срествами HTML и CSS".
AJAX - это все, что подразумевает взаимодействие клиента с сервером без перезагрузки страницы.
В некоторы приложениях AJAX вытесняются Сокетами (прямые соединения) из-за приложений, кот. требуют большую загрузку и большое кол-во запросов.
AJAX - это пинг-понг с постоянными ЗАПРОС-ОТВЕТ, а сокеты - это прямой канал, кот. прорубили.
Сокеты работают только с Node.js.

Когда пишем POST-запрос AJAX'ом, у нас отправляемые на сервер параметры передаются методу send(params). Т.е., если отправляем параметры методом GET, мы можем приклеить их к адресу (.open('GET', 'ip.php?a=1&b=2')), то делая POST-запрос, МЫ ОБЯЗАНЫ задать параметры в методе send(). Это ЖЕСТКОЕ ПРАВИЛО!



---------------------------------------------------------
	JSON
---------------------------------------------------------

JSON используется для представления объектов в виде строки. JSON позволяет передавать массив на сервер и получать его с сервера.

Клиентские данные преобразуются в понятный серверу JSON-объект и отправляются на сервер для обработки. В ответ сервер присылает другой JSON-объект, кот. преобразуется в нативный JS-объект.

JSON используется для представления объектов в виде строки. Это один из наиболее удобных форматов данных при взаимодействии с JavaScript. Если нужно с сервера взять объект с данными и передать его клиенту, то в качестве промежуточного формата – для передачи по сети, почти всегда используют именно его.

JSON.parse – читает объекты из строки в формате JSON.
Вызов JSON.parse(str) превратит строку с данными в формате JSON в JS-объект/массив/значение. Объекты в формате JSON похожи на обычные JS-объекты, но отличаются от них более строгими требованиями к строкам – они должны быть именно в двойных кавычках.
JSON.stringify – превращает объекты в строку в формате JSON, используется, когда нужно из JavaScript передать данные по сети.

Наиболее частое распространенное использование JSON - пересылка данных от сервера к браузеру. Обычно данные JSON доставляются с помощью AJAX, который позволяет обмениваться данными браузеру и серверу без необходимости перезагружать страницу

В реальном приложении ваш JS код будет получать заказ в виде строки JSON в AJAX ответе от скрипта сервера, передавать строку методу JSON.parse(), а затем использовать данные для отображения на странице пользователя.

---------------------------------------------------------

МАССИВ - это упорядоченная коллекция объектов с целочисленным индексом.

РЕГУЛЯРНОЕ ВЫРАЖЕНИЕ - это объект, кот. описывает символьный шаблон.
Для работы со спец. выражениями есть класс RegExp:
	var pattern = new RegExp("\w+", "gim")

СКВ - система, регистрирующая изменения в файле, чтобы в дальнейшем  была возможность вернуться к его прежней версии.

СТАТИЧЕСКИЕ методы и атрибуты, объявленные внутри Класса, существует даже, если у Класса нет экземпляров:
	Student::$name;
