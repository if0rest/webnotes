СКВ - система, регистрирующая изменения в файле, чтобы в дальнейшем  была возможность вернуться к его прежней версии.
СКВ бывают локальными (доступ только у разраба), центализованными (1 репозиторий, неск. пользователей) и распределенными (репозиторий на сервере + на компе у каждого разработчика: если что не так с сервом, можно бекапнуться с репозитория другого разработчика).

----------------------------------------------------------------------

// первым делом после установки указываем имя и email
// если указана опция --global, настройки достаточно сделать 1 раз, и git будет исп. тх для всего
git config --global user.name "Vladimir Khaprov"
git config --global user.email "vo1-khaproff@mail.ru"

// вывести конфиг
git config
// вывести все настройки из конфига
git config --list
// открыть страницу руководства [необяз уточнение]
git help [commit]

Создать git-репозиторий
1 путь: клонировать уже имеющийся (напр, с github)
2 путь:
git init			# импорт в git уже существующий каталог

// каждый файл в рабочем каталоге может находиться в 1 из 2 состояний: 'под версионным контролем' и 'неотслеживаемые' (untracked)
// в каком статусе находится репозиторий
git status
// сделать файл отслеживаемым
git add index.html
git add .
git add --all
git add -A
// связку status + add будешь часто использовать

// "закоммитить" - сделать слепок, создать снимок состояния проиндексированных файлов рабочей директории, зафиксировать изменения файлов
git commit -m "first comment"

// после создания репозитория на github
// определим удаленный репозиторий и назовем его origin
git remote add origin https://...
// подключение к github
git push -u origin master
// после чего репозиторий будет залит на удаленный сервер

// клонировать проект с репозитория [папка для хранения]
git clone https://...git [loftblog]

// создать новую ветку
git branch new_style
// переключиться в эту ветку
git checkout new_style
// проверяем, произошло ли переключение
git branch
// после изменений в ветке переключаемся в главную
git checkout master

// вывести список коммитов в консоль наглядно
git log --graph --all(для всез веток) --decorate(раскрасит) --oneline(в 1 строку)

// "решаю, что красный цвет не нравится, хочу зеленый, но он в другой ветке, и я буду ее сливать с master"
git merge new_style
// после слияния ветка new_style уничтожается

// синхронизация изменений в общем репозитории другим разработчиком
git pull

===================================================================

// чтобы исключить файлы или папку, создаем в корне файл .gitignore

// определим место, куда будут заливаться изменения
git remote add имя_репозитория https://.../gitOverview
// собственно загрузка
git push имя_репозитория master

// "вы хотите добавить изменения, но опасаетесь, что что-то может поломаться в текущей версии"
git tag "version 1.0"

// "вы хотите вносить изменения, но чтобы ветка не менялась"
// это актуально при внесении существенных изменений в код. Мы отходим от основной ветки, создавая новую, вносим изменения, тестируем и, если все работает, сливаем ее с master
git branch new_branch_name
git branch 								# определим, в какой ветке находимся
git checkout new_branch_name		# переключимся на
git checkout master					# другую ветку
git merge new_branch_name			# сливаем новую ветку с master
git branch -D new_branch_name		# если ветка не нужна
git log									# посмотреть историю изменений

Последовательность:
git init
git status
git add .
git status
git commit -m "first comment"