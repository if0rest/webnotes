"Зачем нужен фреймворк?"
Мы часто применяем шаблонные решения, и чтобы их постоянно не переписывать, мы объединяем их в библиотеку - фреймворк. Т.о., фреймворк - это библиотека готовых решений.

Laravel - самый популярный PHP-фреймворк. Отчасти это обусловлено хорошим взаимодействием с JS.

Yii очень прост в освоении.

OpenCart - это MVC + адаптивный Bootstrap + набор плагинов. В v3 новый шаблонизатор TWIG, пришедший на смену TPL.

# Как делать бекап?
1. Создаем резервную копию БД в phpMyAdmin: db_name -> Экспорт.
2. Копируем файлы сайта.

+----- Mail.ru -----+

ФРЕЙМВОРК - это библиотека, кот. задает структуру проекта, упрощает типовые задачи (парсинг $, генерация ответа, доступ к БД), предлагает готовые решения распространенных проблем, что экономит ресурсы.

MVC-фреймворк задает структуру веб-приложения. Этот паттерн говорит, из каких частей должно состоять веб-приложение, и как они должны взаимодействовать.
Их плюс в том, что они предоставляют готовую архитектуру проекта. Во избежание излишне сложного (спагетти-) кода задают готовый подход к написанию проекта, в результате архитектура получается лучше.


• WSGI-приложение входит в состав FW, т.е. Application-Server вызывает некую Ф внутри FW. Далее выполняется код FW, кот. выполняет всевозможные промежуточные действия, выполняется MiddleWare (обертки, кот. прозрачным образом добавляет Ф).
• Когда код FW отработал, необходимо определить, какую Ф (контроллер) вызвать в приложении - опр. точку входа в приложение. Для этого исп. Router.
• ROUTER - это компонент веб-приложения, кот. представляет отображение (маппинг) урлов на функции. Router мб представлен разными способами. В нек. случаях это просто набор типа "паттерн_урла - функция". Так или иначе, ROUTER - это не программный код, а декларативное описание того, к какой функции должен приводить конкретный URL. Router определяет, какой контроллер будет выполняться.
• Когда FW опр., какой контроллер будет выполняться, он передает управление контроллеру. CONTROLLER - это точка входа в веб-приложение. Контроллеров мб много, с помощью роутера выбирается один и выполняется. Контроллер делает вызовы к Модели.
• MODEL полностью реализует бизнес-логику. МОДЕЛЬ - это та часть веб-приложения, в кот. реализована бизнес-логика: поход в БД, обращенеи к внешним сервисам, к-то вычисления и т.п. Все, что представляет ценность, должно находиться в модели. Модель возвращает контроллеру готовые данные для отображения, а контроллер отдает их в компонент VIEW.
• VIEW - это представление, роль которого сгенерировать HTML-страницу (или json, xml) и передать ее клиенту. В нек. случая компонент VIEW может вызывать методы модели/контроллера напрямую, но это опционально.

РОЛИ КОМПОНЕНТОВ MVC
• ROUTER - выбор конкретного контроллера по URL.
• MODEL - реализация бизнес-логики приложения (доступ к данным, вычисления, действия, взаимодействие с внешними сервисами). При необходимости может вызывать вспомогательные классы (хелперы).
• CONTROLLER - работает с HTTP: знает про названия заголовков, параметров, как называются cookie, чего модель не знает. Обеспечивает связь Model-View: сначала вызывает Model, после передает данные View. Задача К абстрагировать модель от работы с протоколом HTTP.
• VIEW - генерация HTML или др. представления по готовым данным.


===========================================================
JOOMLA
===========================================================

Joomla! представляет собой CMS, написанную на языках PHP и JavaScript. В качестве объекта для хранения информации она использует MySQL.

Изначально Joomla! разрабатывалась для управления статьями. Этим можно объяснить простоту и малофункциональность после её установки. Однако разнообразные расширения делают эту CMS многофункциональной и легко интегрируемой в любой из проектов.
Все расширения делятся на три группы: компоненты, модули и плагины.

Компонент
Компонент - это небольшая система управления содержимым. Она устанавливается в Joomla и далее используется, практически как самостоятельная CMS. В неё также можно установить расширения. Примером компонента можно назвать галерею Phoca Gallery. Она даёт возможность выводить в части страницы, (то есть статьи) фотогалерею, вместо обычной фотографии. Это будет отличный компонент при создании сайта фирмы. Можно на одной странице удобно и быстро показать примеры работ компании и их описание.

Модуль
В отличие от компонента, который выводит своё содержимое (товары, галерею) в тексте страницы, в основном по центру, модуль выводит содержимое на других участках страницы: в шапке, в левом и правом блоке, в футере. Например, модуль меню. Он позволяет выводить выпадающее меню различных цветов и шрифтов на всех страницах сайта. Во всех шаблонах Joomla предусмотрены места для установки модулей. Это могут быть календари, поиск, обратные формы, авторизации и так далее. Если вы желаете увидеть, где в шаблоне имеется возможность размещения модулей, то необходимо в адресной строке браузера написать домен вашего проверяемого сайта с данным шаблоном.

Плагин
Плагин – это наименьший вид расширений в Joomla, ориентированный на выполнение определенной функции при возникновении в системе определенного события. Например, визуальный редактор в Joomla - это плагин, срабатывающий, когда в системе наступает событие вызова редактора. Большинство плагинов Joomla используются для определенных действий и манипуляций над содержимым перед его отображением.

Таким образом, можно сказать, что CMS Joomla является своеобразным конструктором. После установки её на сервер она ничего собой не представляет и не может обеспечить функционалом даже домашнюю страничку. Однако благодаря различным расширениям, она превращается в мощную систему с множество функций и параметров.

Достоинство данной системы заключается в том, что она не загружает сервер множеством ненужных дополнений. Вы по мере развития и необходимых потребностей самостоятельно устанавливаете лишь те функции, которые вам действительно необходимы.

===========================================================
WORDPRESS
===========================================================

В WP с версии 4.3 добавили визуальный редактор (кастомайзер).

wp-contents > themes > имя_темы > functions.php, page.php *, screenshot.png, style.css

"Мы можем сделать здесь не the_custom_logo(), а var_dump( get_custom_logo() ). У WP всегда эти Ф парные - которые либо выводят, либо возвращают значения"
----------------------------------------------------------

Имея скромное происхождение, WP вырос в очень развитую CMS. На WP может работать ВСЕ. WP - это простая и легкая в использовании платформа (инструмент) для публикации в вебе.

МЕТКИ (теги) - это ассоциативный инструмент для организации, и они опциональны. Метки - это относительно родственные темы, кот. слегка связывают контент вместе.
Это ярлык одежды, указывающий производителя, бренд, материал, цвет. Несколько вещей могут иметь один бренд, но из-за этого они не относятся к 1 категории. Тем не менее, можно исп. этикетки, чтобы связать их друг с другом. Если есть шерстяной свитер и штаны - они связаны, т.к. сделаны из 1 материала, но они не относятся к 1 категории. Т.о. можно связывать контент с помощью меток без необходиомсти группировать его, когда он не попадает в 1 рубрику.

"Несмотря на то, что статья выглядит вполне симпотично с типографической точки зрения, в ней нет никаких факторов интересса (напр, изображений)".

ВИДЖЕТЫ - то, что отображается в сайдбаре сайта.

Одно из главных ОТЛИЧИЙ МЕЖДУ ЗАПИСЯМИ и СТРАНИЦАМИ: записи взаимосвязаны с помощью рубрик и меток, а страницы - с помощью родительско-наследственных отношений.

ПЛАГИНЫ - это маленькие кусочки софта, кот. буквально вставляются (plug in) в WP и добавляют доп. функции.

WP - это просто инструмент, который позволяет получить доступ к БД.

===========================================================
DRUPAL
===========================================================

CMS, а также среда для создания веб-приложений (CMF). С ее помощью можно строить сайты и веб-приложения различного назначения и сложности.

CMS - по сути, это инфо система или компьютерная программа. Она исп. для организации совместного процесса создания, редактирования и управления содержимым сайта.

Модуль - это спец. программа, кот. расширяет или изменяет стандартные возможности ядра CMS Drupal под свои нужды.

===========================================================
MODX
===========================================================

MODX написана на программном языке PHP и использует для хранения данных СУБД MySQL или MS SQL.
Система управления MODX может быть установлена на большинстве веб-серверов (например, таких как IIS, Apache, Lighttpd, nginx и Zeus), а контрольная панель системы (или админ-зона) работает практически во всех современных браузерах.

Логика виджетов: виджеты входят в панель, а панель прикрепляется к группам пользователей.

У MODX есть несколько типов элементов:
• Шаблоны — это базовая сущность опр. отображение страницы (внешний вид сайта). Мб назначен любому ресурсу. По сути опр. веб-страницу, в кот. будет выведено содержимое этого ресурса.
• Чанки - кусочки html-кода. Вызываются через спецсимвол [[$name]]. MODX будет искать такой чанк в системе и, если найдет, выведет.
• Сниппеты – куски PHP кода, которые исполняются во время обработки шаблона и добавляют функциональность в ваш сайт (навигацию, записи твиттера, поиск, галереи, формы контактов). Они обеспечивают польз. динамичный контент (меню, блоги, новые списки и др. функ. блоки), который ваш сайт должен генерировать по запросу.

У MODX все шаблоны хранятся в БД.

Пакеты в MODX - что-то вроде модулей. Отечествнный репозиторий - modstore.pro.

В MODX есть каталог assets, в кот. хранится весь публичный контент.

ЧАНКИ - это кусочки html-кода для произвольного размещения.
Чанки -> Быстро создать чанк (с именем includes) -> [[$includes]] в документе.

У MODX есть зарезервированные имена всех полей, кот. есть в ресурсе.
[[*longtitle]]
// если длинный заголовок пустой, выводить краткий
[[*longtitle:default=`[[*pagetitle]]`]]

Системные настройки тоже вызываются через плейсхолдер, кот. начинаются с '++':
[[++site_name]]