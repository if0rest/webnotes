---------------------------------------------------------
   HTTP
---------------------------------------------------------

ПРИМЕР ЗАПРОСА HTTP:
   GET /courses/networks HTTP/1.1   метод  |  ресурс  |  версия протокола
   HOST: www.asozykin.ru            заголовок  |  доменное имя

ПРИМЕР ОТВЕТА ВЕБ-СЕРВЕРА:
HTTP/1.1  200 OK     версия протокола  |  статус (код ответа)
Server: nginx     реализация сервера
Content-Type: text/html; charset=UTF-8    тип передаваемой страницы
Content-Length: 5161
Connection: close/open (если есть C-Length)  "Соединение нужно закрыть"
   (пустая строка)
<!DOCTYPE html>

<!> MIME-Type и Content-Type в вебе 1 и то же. Он обязательно нужен браузеру, чтобы отобразить документ.

Чтобы генерировать динам. файлы, веб-сервер должен уметь запускать к-то программы. Для этого был разработан протокол CGI (общий интерфейс шлюза) - соглашение, по кот. сервер для генерации ответа может запустить внешнюю программу.

В куки разрешалось хранить пользовательские параметры или ИД сеанса, но мало реальных данных. Но в HTML5 появился API WebStorage, позволяющий веб-сайтам хранить в браузерах пары ключ-значение. Для хранения более крупных наборов данных можно исп. XML-файлы или объекты JSON.
XML - это язык разметки, похожий на HTML, но расширяемый. XML может содержать любые данные.
JSON - применяется для хранения простых значений в текстовых файлах.
Оба способа позволяют исп. JS для записи данных и их получения из файлов. Но БД - круче их всех.

XML предоставляет удобный синтаксис для описания иерархии данных. Передавая в SOAP именно такую структуру, мы можем сообщить некоему серверному сценарию не только переменные и их значения, но и их зависимость и иерархию.

ВЕБ-СТЕК - набор программа на сервере. Он состоит из: ОС, веб-сервера, сервера БД и ЯП.


ТЕРМИНОЛОГИЯ
ПОРТ (PORT) - это циферка, адрес программы внутри ОС. Когда мы говорим, что "программа слушает на порту", это значит, что она принимает сетевые соединения. При открытии сетевого соединения, указывается номер порта.
СОЕДИНЕНИЕ (connection) - TCP-соединение. Когда клиент подключается к программе на этот порт, между ними появляется сетевое соединение. И веб-клиент и веб-сервер работают с этим соединением по принципу файлового дескриптора, т.е. СС можно читать или писать, однако данные там появляются несколько непредсказуемым образом, т.е. невсегда можно прочитать столько, сколько хотите, только сколько пришло.
СОКЕТ (socket) - программный интерфейс для установления СС. Конструкция, с кот. работает ЯП.
'Запрос (request)'
'Локейшен (location)' - множество URLов, способ задать группу URL (URL - это адрес документа на веб-сервере).
'Файлы и директории (directory)' - папка в ОС.
'Файл подкачки (httpd.conf, nginx.conf)'
'Лог доступа (access log)'
'Лог ошибок (error log)'

==============================================
   SOAP и REST
==============================================

SOAP протокол обмена xml-сообщениями.

REST — это не стандарт и не спецификация, а архитектурный стиль, выстроенный на существующих, хорошо известных и контролируемых консорциумом W3C стандартах, таких, как HTTP, URI (Uniform Resource Identifier), XML и RDF (Resource Description Format). В REST-сервисах акцент сделан на доступ к ресурсам, а не на исполнение удаленных сервисов; в этом их кардинальное отличие от SOAP-сервисов.
И все же удаленный вызов процедур применим и в REST. Он использует методы PUT, GET, POST, DELETE HTTP протокола для манипуляции объектами. Кардинальное отличие его от SOAP в том, что REST остается HTTP-запросом.

XML предоставляет удобный синтаксис для описания иерархии данных. Передавая в SOAP именно такую структуру, мы можем сообщить некоему серверному сценарию не только переменные и их значения, но и их зависимость и иерархию.
___________________________________________________________________

SOAP активно использует XML для кодирования запросов и ответов, а также строгую типизацию данных, гарантирующую их целостность при передаче между клиентом и сервером. С другой стороны, запросы и ответы в REST могут передаваться в ASCII, XML, JSON или любых других форматах, распознаваемых одновременно и клиентом, и сервером. Кроме того, в модели REST отсутствуют встроенные требования к типизации данных. В результате пакеты запросов и ответов в REST имеют намного меньшие размеры, чем соответствующие им пакеты SOAP.

В модели SOAP уровень передачи данных протокола HTTP является «пассивным наблюдателем», и его роль ограничивается передачей запросов SOAP от клиента серверу с использованием метода POST. Детали сервисного запроса, такие как имя удаленной процедуры и входные аргументы, кодируются в теле запроса. Архитектура REST, напротив, рассматривает уровень передачи данных HTTP как активного участника взаимодействия, используя существующие методы НТТР, такие как GET, POST, PUT и DELETE, для обозначения типа запрашиваемого сервиса. Следовательно, с точки зрения разработчика, запросы REST в общем случае более просты для формулирования и понимания, так как они используют существующие и хорошо понятные интерфейсы HTTP.

Модель SOAP поддерживает определенную степень интроспекции, позволяя разработчикам сервиса описывать его API в файле формата Web Service Description Language (WSDL, язык описания веб-сервисов). Создавать эти файлы довольно сложно, однако это стоит затраченных усилий, поскольку клиенты SOAP могут автоматически получать из этих файлов подробную информацию об именах и сигнатурах методов, типах входных и выходных данных и возвращаемых значениях. С другой стороны, модель REST избегает сложностей WSDL в угоду более интуитивному интерфейсу, основанному на стандартных методах HTTP, описанных выше.

В основе REST лежит концепция ресурсов, в то время как SOAP использует интерфейсы, основанные на объектах и методах. Интерфейс SOAP может содержать практически неограниченное количество методов; интерфейс REST, напротив, ограничен четырьмя возможными операциями, соответствующими четырем методам HTTP.
___________________________________________________________________

На многих веб-серверах исп. виртуальный хостинг, что позволяет располагать неск. сайтов по 1 IP-адресу.
Часто можно выбрать разделяемый или выделенный хостинг. В 1 случае - сайт располагается на веб-сервере с другими сайтами, а при 2 - сайту предоставляется отдельный сервер.
___________________________________________________________________

Веб-стек - набор программа на сервере. Он состоит из:
1. ОС
2. Веб-сервера
3. Сервера БД
4. Языка программирования
___________________________________________________________________

Любые сценарии или программы, выполняемые на веб-сервере, называются серверными сценариями. Они могут исп. для обработки форм, управлением покупками в инете, регистрации пользователей и т.д.
___________________________________________________________________

В куки разрешалось хранить пользовательские параметры или ИД сеанса, но мало реальных данных. Но в HTML5 появился API WebStorage, позволяющий веб-сайтам хранить в браузерах пары ключ-значение. Для хранения более крупных наборов данных можно исп. XML-файлы или объекты JSON.
XML - это язык разметки, похожий на HTML, но расширяемый. XML может содержать любые данные.
JSON - применяется для хранения простых значений в текстовых файлах.
Оба способа позволяют исп. JS для записи данных и их получения из файлов. Но БД - круче их всех.
___________________________________________________________________

Сервер - это как железка, так и ПО, кот раздает файлы по протоколу HTTP.

ТЕРМИНОЛОГИЯ
'Порт (port)' - это циферка, адрес программы внутри ОС. Когда мы говорим, что "программа слушает на порту", это значит, что она принимает сетевые соединения. При открытии сетевого соединения, указывается номер порта.
'Соединение (connection)' - TCP-соединение. Когда клиент подключается к программе на этот порт, между ними появляется сетевое соединение. И веб-клиент и веб-сервер работают с этим соединением по принципу файлового дескриптора, т.е. СС можно читать или писать, однако данные там появляются несколько непредсказуемым образом, т.е. невсегда можно прочитать столько, сколько хотите, только сколько пришло.
'Сокет (socket)' - программный интерфейс для установления СС. Конструкция, с кот. работает ЯП.
'Запрос (request)'
'Локейшен (location)' - множество URLов, способ задать группу URL (URL - это адрес документа на веб-сервере).
'Файлы и директории (directory)' - папка в ОС.
'Файл подкачки (httpd.conf, nginx.conf)'
'Лог доступа (access log)'
'Лог ошибок (error log)'

___________________________________________________________________
___________________________________________________________________
___________________________________________________________________


+===========================+
|    ДИРЕКТИВЫ .htaccess    |
+===========================+

• .htaccess - файл доп. конфигурации сервера Apache (есть основной - httpd?.conf). С помощью .htaccess мы можем управлять большинством настроек сервера. Он позволяет задавать огромное кол-во параметров, разрешений для работы веб-сервера у конкретных пользователей.
• Ошибка в файле .htaccess (напр, пропущенный пробел) приведет к Error 500. Если после исправления ошибки сервер продолжает возвращать ошибку - без паники. Вероятно, он берет файл из кеша: надо почистить кеш или воспользоваться др. браузером.
• Изменения в файле подхватываются сервером налету без необходимости перезапуска.
• Скрыть листинг также можно, поместив пустой индексный файл внутрь каталога - но это напряжно, проще директива Options.

----------------------------------------------------------------
AddDefaultCharset utf-8

#Запрет листинга каталогов. Вернет 503 Forbidden. Можно разрешить локальный листинг, создавая .htaccess в нужной дирректории. Т.о. листинг распространяется и на подкаталоги
Options -Indexes

#Осторожно и на свой риск. При запросе без указания расширения файла вернет одноименный файл с любым расширением. По умолчанию '-'
Options +Multiviews

#Переопределение индексного файла: чтобы сервер искал на index.*, а к-то другой (даже картинку)
DirectoryIndex another_file.php

#Стилизация листинга
IndexOptions FancyIndexing
#Добавляет в листинге данные для графы Description
IndexOptions FancyIndexing ScanHTMLTitles

#Позволяет скрывать файлы опр. расширений или опр. файлы в листинге
IndexIgnore *.zip *.rar hide_it.txt
#Пустой листинг
IndexIgnore *

#Для поддержки автономных веб-приложений файлу .appcache добавляется MIME-тип, чтобы сервер отправлял правильный файл-манифест
AddType text/cache-manifest .appcache

#Защита WordPress от атакующего бота, делающего запросы и увеличивающего нагрузку на сервер, путем закрытия доступа к xmlrpc.php и wp-config.php
<Files xmlrpc.php>
order allow,deny
deny from all
</Files>
<Files wp-config.php>
order allow,deny
deny from all
</Files>
----------------------------------------------------------------
AddDefaultCharset utf-8

Options -Indexes
Options +FollowSymlinks

RewriteEngine On
RewriteBase /
RewriteRule ^sitemap.xml$ index.php?route=extension/feed/google_sitemap [L]
RewriteRule ^googlebase.xml$ index.php?route=extension/feed/google_base [L]
RewriteRule ^system/download/(.*) index.php?route=error/not_found [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} !.*\.(ico|gif|jpg|jpeg|png|js|css)
RewriteRule ^([^?]*) index.php?_route_=$1 [L,QSA]

# Редирект для главной (с /index.php на /)
RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /index\ HTTP/
RewriteRule ^index\.html$ / [R=301,L]
RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /index\.php\ HTTP/
RewriteRule ^index\.php$ / [R=301,L]

# Редирект со страницы «Связаться с нами» на «Заказать обратный звонок»
RewriteCond %{QUERY_STRING} ^route=information/contact$ [NC]
RewriteRule ^index\.php$ http://cv08179.tmweb.ru/callback/ [L,R=301]

#AllowOwerride All
----------------------------------------------------------------

+============+
|    HTTP    |
+============+

- Протокол HTTP - основа WWW.
- Большую роль в работе HTTP играет URL (Uniform Resource Locator - уникальное положение ресурса) - это уникальный адрес веб-страницы в интернете.
- HTTP исп. транспортный протокол TCP.
- Работает в режиме запрос-ответ. Клиент запрашивает страницу, сервер - отсылает.
- Пакет HTTP состоит из 3 частей:
   Запрос/статус ответа:
      • GET /courses/networks HTTP/1.1
      • 200 OK
   Заголовки:
      • Host: www.vk.com
      • Content-Type: text/html; charset=utf-8
      • Content-Length: 5161
   Тело сообщения:
      • Страница HTML
      • Параметры, введенные пользователем
- Статусы HTTP:
   1xx - инфо
   2хх - успешное выполнение
   3хх - перенаправление (301-постоян. перемещение, 302 - «перемещено временно»); 307-временное перенаправление)
   4хх - ошибка на клиенте (403-доступ запрещен, 404-не найдена)
   5хх - ошибка сервера (500-внутр. ошибка)
- Пример ответа сервера:
   HTTP/1.1 200 OK
   Server: nginx
   Content-Type: text/html; charset=utf-8
   Content-Length: 5161

   <html lang="ru">
   ...

============================================================
   ПОСТОЯННОЕ СОЕДИНЕНИЕ В HTTP (Connection: keep-alive)
============================================================

• Прежде чем что-то загружать с сервера, клиенту надо установить TCP-соединение. Затем выполняется запрос по протоколу HTTP (GET), сервер возвращает веб-страницу, после чего соединение закрывается. Браузер анализирует содержимое веб-страницы, видит, что необ. загрузить в целевой файл большое кол-во картинок и др. ресурсов. Чтобы загрузить след. ресурс, напр. файл CSS, нужно открыть новое соединение. Т.о., чтобы загрузить каждый новый файл, нужно открыть отдельное TCP-соединение.
• Постоянное соединение (HTTP keep-alive) - альтернативный подход, предлагающий исп. 1 TCP-соединение для загрузки неск. ресурсов. Преимущества:
   • Сокращение расходов на установку TCP-соединений
   • Нет необ. кажд. раз начинать передачу данных с маленьким размером окна TCP (медленный старт)
• Можно явно просить закрытия содинения: (Connection: close)
   ПРЕИМУЩЕСТВА:
      • не нужно тратить время на установку TCP-соединения
      • высокая скорость передачи данных за счет большего окна TCP
--------------------------------------------------------------------------
   КОНВЕЙЕРНАЯ ОБРАБОТКА HTTP (pipelining)
Другая технология, позволяющая увеличить скорость передачи данных по HTTP. Суть следующая: после запроса получаем ответ, браузер проанализировал ответ и извлек перечень всех ресурсов, кот. нужно загрузить с серва. КО позволяет передать от клиента к серверу сразу неск. запросов для загрузки ресурсов, не дожидаясь получения ответа, а сервер отправляет все запрошенные ресурсы.
--------------------------------------------------------------------------
   НЕСКОЛЬКО HTTP-СОЕДИНЕНИЙ
Еще 1 способ > скорость загрузки страниц. Клиент открывает неск. соединений с веб-сервером, и каждое соединение исп. для загрузки разных ресурсов. Каждое такое соединение мб постоянным. От 4-8 соед.

====================================
КЕШИРОВАНИЕ В HTTP
====================================

Кэш — промежуточный буфер с быстрым доступом, содержащий информацию, которая может быть запрошена с наибольшей вероятностью.

Cache-Control - основные директивы для управления кэшированием:
   no-cache
   no-store
   max-age=3600
   max-stale=0
   min-fresh=0
   no-transform
   only-if-cached
   cache-extension

Основная проблема, как браузеру опр., можно ли брать страницу из кэш, или она изменилась, и надо обращаться к серверу? В HTTP для этого исп. заголовок Expires: он указывает продолж. хранения ресурсов в кэш, после какого времени ресурс устареет и его придется запросить у сервера.
   Expires: Sun, 12 Jun 2016 10:35:18 GMT
Если Expires не указан, браузер может исп. некот. эвристики:
   • Last-Modified: Wed, 25 May...
--------------------------------------------------------------------------
Протокол HTTP содержит другой подход, кот. позволяет опр., изменилась ли страница. Для этого клиент должен отправить серверу "Запрос GET с условием". Conditional GET - запрос веб-серверу передать ресурс, если он изменился с указ. времени.
Conditional Get можно исп. только если в HTTP запросе установлен Last-Modified. В след. раз, когда браузер обратиться за ресурсом, он будет исп. CG: в этом запросе исп. доп. заголовок If-Modified-Since.
--------------------------------------------------------------------------
ETag В ЗАПРОСАХ GET C УСЛОВИЕМ
   • Заголовок If-None-Match: 5738933-3n4b
--------------------------------------------------------------------------
ЗАГОЛОВОК CACHE-CONTROL
   Cache-Control: private, max-age=10
Возможные значения:
   • no-store - ресурс нельзя сохр. в кеш
   • no-cache - ресурс сохр. в кеш можно, но для его исп. нужно выполнить Conditional Get. Брать из кеш, если не изменился на сервере
   • public -  инфа доступна всем, можно кешировать
   • private - можно хранить только в частном кеше браузера, не в разделяемом
   • max-age=86400 - время хранения в сек
Данные браузера мб закешированы не только в браузере, но и на др. серверах (прокси).