---------------------------- НОВОЕ --------------------------------
.class {
	border: 1px solid black;
	border-top: none;
	border-bottom: none;
}

h1>lorem20
m0+p0
w140+h74
height: 100vh;
maw58% --> max-width: 58% - исп. в adaptive
bdrs50% --> border-radius: 50%;

<div id="container" style="background-image: url(images/bg.jpg)"></div>
#container {
	position: relative;
	height: 100vh;
	background: no-repeat center 0 / cover;
}

Каждый подключаемый .css начинал с:
@charser 'UTF-8'

a::after {
	content: 'more →';
	content: 'Подробнее ...';
}

:nth-of-type(1)

a {
	display: inline-block;
	width: 20px;
	height: 20px;
	margin-right: 20px;
	background: url('../img/soc-icon2.png') no-repeat 0 center;
}

list-style-image: url(images/pic1.png);
list-style: type image position;
li:nth-child(3) ~ li {} - все li, кот. следуют после li(3).

img.logo[images/logo.png alt='Логотип']  ->  <img src="images/logo.png" alt="Логотип" class="logo">
a[#]  ->  <a href="#"></a>

---------------------------- НОВОЕ --------------------------------

<!--[if lt IE 9]>
<script src='html5shiv.js'></script>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![end if]-->
____________________________________________________________________

Заголовок формирует неявный раздел, который завершается с началом следующего заголовка. Не думай о заголовке как о большом жирном тексте. Выбрось это из головы. Заголовки нужны для обозначения уровня разделов в документе.
____________________________________________________________________

Любой вводный контент можно обособить тегом <header>. Текст внутри должен быть презентационным вступлением, предварять основную полезную информацию.
<header> целесообразно использовать внутри <article>, заключая в него, например, информацию об авторе, предмете статьи, времени публикации, ключевые слова.
____________________________________________________________________

Обычно <footer> находится в конце, но не существует правила, обязываюшего его находится в самом конце. Каждый раз, когда есть раздел с контентом, который сообщает, кто автор, контактную инфу? инфу об авторе и т.д. - все это подходит семантически под тэг footer и не должно находиться в самом конце.
____________________________________________________________________

<figcaption> содержит информацию о том, что изображено на картинке. Экранные дикторы способны извлекать и читать эту информацию. <figcaption> может использоваться где угодно внутри <figure>.
____________________________________________________________________

<figure> позволяет группировать картинки, схемы, подписи к ним (явные и скрытые) внутри 1 элемента. Однако он также может использоваться с другими типами контента. Цель <figure> - определение отношения иллюстрации контента к остальному контенту на странице и последующая группировка всего осмысленным способом.
____________________________________________________________________

<div class='rightCol'> правая колонка
<div class='leftCol'> - левая
____________________________________________________________________

<i> - смещенный акцент или настроение.
<b> - визуальное акцентирование без передачи важности или значимости.
<i> и <b> влияют на отображение, но не на семантику.
Если хочешь изменить внешний вид текста, лучши используй CSS.
____________________________________________________________________

<q> - выделить как цитату. Может использоваться внутри <blockquote>.
***
<blockquote>
<q>Northridge Loop is easily the best loop in Ojai! You’ll kick yourself if you miss it!</q>
<footer><cite>Nick Brazzi &#8212; The Complete Guide to Trails</cite></footer>
</blockquote>
____________________________________________________________________

<blockquote> - то, что называют sectioning roots: все, что помещаем внутрь, не окажет влияния на основную схему документа. Тут можно использовать заголовки, их семантика будет игнорироваться.
____________________________________________________________________

<meta name> ставится после <title>
<meta name='keywords' content=''> игнорируется поисковыми системами из-за злоупотреблений в ранние дни вэба.
<meta name='description' content=''> используется для краткого описания содержимого страницы.
____________________________________________________________________

Имена классов должны быть наглядными
class='breadcrumbes'
class='currentTrail'
<p class='pubdate'>
<div class='leftCol'>
____________________________________________________________________

<aside> содержит второстепенную информацию, дополняет основной контент. По-своему самостоятелен. Основной контент может обойтись без <aside> без ущерба для себя.
____________________________________________________________________



<A>

<a href="#top">Наверх страницы</a>
<a href="page.html" target="_self/_blank" hreflang="ru" rel="author/me">Ссылка на страницу</a>
<a href="archive.zip" target="_blank" type="application/zip">Ссылка на ZIP-архив</a>
<a href="picture.png" download>Скачать изображение</a> или <a href="pic.png" download><img src="pic.png"/></a>

target="_self - открыть в текущей вкладке, _blank - в новой"
rel="author/me/nofollow" - ведет на страницу автора на текущем домене / на другом домене (wiki.whatwg.org/wiki/RelExtensions) / не передавать "тицилипиар" О_о
type="application/zip" - атрубит носит рекоменд. хар-р (все типы на www.iana.org/assignments/media-types/media-types.../)
<a href="картинка.png" download> - при клике картинка не откроется, а скачается.
____________________________________________________________________

Пару слов о iframe.

<iframe src="name.html" width="" height="" scrolling="auto/yes/no" ></iframe>
____________________________________________________________________

<INPUT>

<input type="text" autocomplete="on" maxlenght="20" size="25" placeholder="Введите текст" spellcheck="true/false/default" name="" required>
<input type="email"> - проверка на соответствие стандарту email-адреса
<input type='radio' name='c1' value='1' checked>
<input type='range' min='0' max='1000' step='10'>
<input type='file' accept='image/*' multiple>
<input type="button" value="Зарегистрироваться">
<input type="text" autofocus tabindex="1">
autocomplete - так и не понял, но лучше писать
maxlenght - макс. число символов
placeholder - текст внутри поля
required - сделать заполнение поля обязательным (работает, если в форме не задан novalidate)
autofocus - при загрузке страницы курсор помещается в указанное поле
readonly - поле видно, но не активно
size - длина поля
spellcheck - проверка орфографии
pattern - шаблон ввода текста (запроса)
name - имя (обязательно!); в radio используется для единичного выбора между неск. вариантами
value - значение, отправляемое на сервер
checked - отмечено по умолчанию
accept - разрешение на загрузку определенных типов файлов. Напр., 'image/*' - вся графика; 'audio/mp3, audio/wav' - только mp3 и wav; 'video/*'
multiple - загрузка сразу нескольких файлов
tabindex - переключение между полями посредством tab


Фишечка. Поле ввода с раскрывающимся списком. Имеются готовые вариантами, которые предлагаются при вводе.

 <form action="page.html" autocomplete="on" method="POST">
		  <input type="text" name="myName" placeholder="Ваше имя" list="nameList">
				<datalist id="nameList">
					 <option value="Никита">
					 <option value="Владимир">
					 <option value="Илья">
				</datalist>
</form>

То же раскр. список, но выбор ограничен предложенными вариантами.

<form action="page.html" autocomplete="on" method="post">
		  <select name="" id="">
				<option value="" disabled selected>Не выбрано</option>
				<option value="" disabled>Грудь</option>
				<option value="">Плечи</option>
				<option value="">Спина</option>
				<option value="">Ноги</option>
		  </select>
</form>
disabled - отображает, но отключает возможность выбора
selected - отображает по умолчанию
value - отправляется на сервер

<button type="button/reset">Submit</button>
button превращает функциональную кнопку в декоративный элемент
reset - очищает форму заполнения
____________________________________________________________________

<VIDEO> и <AUDIO>

<video src="video.mp4#t=23,45" height="320" controls loop autoplay></video>
<video src="video.mp4" controls preload="auto" poster="poster.png" ></video>

src="video.mp4#t=23,45" - время начала (23с.) и конца (45с.) воспроизведения. "*#t=,23" - ограничение на просмотр до 23с. "*#t=0,01:15:00" - воспр. от 0 до ~
controls - добавление элементов управления
autoplay - автоматическое воспроизведение
loop - зациклить видео
preload="none/metadata/auto" - буферизация видео (не использовать вместе с autoplay - теряется смысл). none - нет превью и инфы о видео; metadata - все есть; auto - буферизация при загрузке страницы.
poster="poster.png" - картинка-превью
muted - звук отключен по умолчанию

На случай, если браузер может не поддерживать формат. Сначала парсит <video>, следом переходит на <source> и подключает видео с опознаваемым форматом.

<video width="400" poster="poster.png" controls preload="metadata">
	<source src="video.mp4" type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'>
	<source src="video.ogv">
</video>

<!> Обрати внимание на кавычки внутри type: двойные внутри одинарных.

____________________________________________________________________


КОМБИНАТОР ПРЯМОГО НАСЛЕДОВАНИЯ (">")

.list>li {border-bottom: 1px dashed #000}

Пример. Допустим, ul.list содержит элементы li 1 и 2 уровней.
-----------------------------------
<ul class="list">
	<li>
		<ul>
			<li>Подэлемент 1</li>
			<li>Подэлемент 2</li>
			<li>Подэлемент 3</li>
		</ul>
	</li>
	<li>List Item 2</li>
	<li>List Item 3</li>
</ul>
-----------------------------------
Если:
.list li {list-style: none}, то стиль применится ко всем li. Но если:
.list>li>ul>li {list-style: none}, то стиль применится только к li 2-го уровня.

____________________________________________________________________

КОМБИНАТОР ("+")

Например. Мы имеем:
-------------------------------
<ul class="list">
	<h4>Заголовок h4</h4>
	<li>List Item 1</li>	<- к этому
	<li>List Item 2</li>
	<li>List Item 3</li>
	<h4>Заголовок h4</h4>
	<li>List Item 4</li>	<- и к этому
	<li>List Item 5</li>
</ul>
-------------------------------
Применяем стиль:
h4 + li {color: green}
В итоге стиль применится только к тем li, которые следует после h4.
____________________________________________________________________

КОМБИНАТОР ("~")

Распространяет стили на все элементы внутри родительского блока.
-------------------------------
<ul class="list">
	<h4>Заголовок h4</h4>
	<li>List Item 1</li>	<- к этому
	<li>List Item 2</li>	<- к этому
	<li>List Item 3</li>	<- к этому
	<h3>Заголовок h3</h3>
	<li>List Item 4</li>
	<li>List Item 5</li>
</ul>
-------------------------------
Используя
h4 ~ li {color: green}
мы стилизуем только те li, которые идут после h4.

____________________________________________________________________

ПСЕВДО-КЛАССЫ   :nth-child   :first-child   :last-child

:nth-child позволяет выбрать каждый n-ный элемент внутри родительского. Так, при
li:nth-child(2n) {color: red}
красным выделится каждый второй li.
------------------------
<ul class="list2">
	<li>List Item 1</li>
	<li>List Item 2</li>	<- этот
	<li>List Item 3</li>
	<li>List Item 4</li>	<- этот
	<li>List Item 5</li>
	<li>List Item 6</li>	<- этот
</ul>
------------------------
Другие варианты:
li:nth-child(2n+3) - каждый 2-ой li, начиная с 3-го.
li:nth-child(odd) и li:nth-child(even) - нечетные и четные соответственно.
li:nth-child(3) - единичное применение к 3-му li с начала.
li:nth-last-child(3) - единичное применение к 3-му li с конца.
li:first-child - применение к первому элементу внутри родительского.
li:last-child - применение к последнему элементу внутри родительского.
____________________________________________________________________

Если у стиля элемента несколько альтернативных значений одного и того же свойства, применяется последнее из указанных.
Если свойство элемента имеет несколько взаимоисключающих значений, применяется то, что было указано последним.
____________________________________________________________________

СОЗДАНИЕ ГОРИЗОНТАЛЬНОЙ НАВИГАЦИИ

По умолчанию li в списке расположены вертикально. Чтобы изменить направление на горизонтальное, в свойствах укажи:
#navigation ul li {float: left}
____________________________________________________________________

О POSITION

Чтобы элемент позиционировался относительно другого элемента, а не страницы в целом, задай родительскому эл-ту {position: relative}, а дочернему - absolute.

Родительский элемент имеет relative, дочерний - absolute.

При {position: fixed} элемент позиционируется относительно окна браузера.

Объект с {position: absolute} помещается внутрь объекта с {position: relative}, где по умолчанию занимает левый верхний угол. Теперь перемещение блока с absolute осуществляется относительно родительского блока с relative посредством отступов: top, bottom, right, left. Например, {top: 0} прижмет дочерний блок к верхней границе родителя.
P.S. Чтобы блок с {position: fixed} оказался поверх, в свойствах допиши {z-index: 1} (либо другое значение).
____________________________________________________________________

СЕЛЕКТОРЫ АТРИБУТОВ

Симолы перед "=" - это комбинаторы значений.
Тэг <a> взят для примера. Тэги и атрибуты могут быть другими.

Примеры:
<a href="" target=""></a>
<a href="" target="_blank"></a>
<a href="" title="внешняя ссылка"></a>
<a href="" class="social-vk"></a>
<a href="" title="social button" или title="socialbutton"></a>
<a href="" title="button icon" или title="button-icon" или title="button_icon" или даже title="buttonicon"></a>
<a href="" title="milicia"></a>

a[target] - все ссылки с атрибутом target
a[target="_blank"] - ссылки, имеющие атрибут target со значением "_blank" (target="_blank" сильнее, чем просто target)
a[title~="внешняя"] - ссылки, у которых значение title содержит пробел и начинается со слова "внешняя"
a[class|="social"] - ссылки, у кот. значение класса содержит дефис и начинается со слова "social"
a[title^="social"] - ссылки, у кот. значение title начинается с указанног слова. При этом не важно, какие символы следуют после
a[title$="icon"] - ссылки, у которых значение title заканчивается на "icon". При этом не важно, какие символы предшествуют
a[title*="ic"] - все ссылки, у которых значение title содержит заданное сочетание символов


Применить свойства ко всем объектам с классом span:
[class*="span"] {}

.top-bar ul > li.search form input[type="search"] + .button {} - стиль применяется к элементу с классом button, который следует сразу после input.
____________________________________________________________________

O MARGIN

{margin: 10px} - отступ 10px со всех сторон
{margin: 10px (˂ и ˃) 20px (˄ и ˅)} - при этом отступы делятся пополам, т.е. справа и слева получается по 5px, сверху и снизу - по 10px
{margin: 10px(˄) 20px(˃) 10px(˅) 20px(˂)}
____________________________________________________________________

О ЕДИНИЦАХ FONT-SIZE

1em - это 100% от размера шрифта родительского элемента. Например, если body имеет 15px, то div с 1.5em = 30px.
0,8em = 80%. 2em = 200%.
____________________________________________________________________

СВОЙСТВА ШРИФТА

{text-transform: capitalize} можно применять к заголовкам или к пунктам меню навигации. Например,
"Есть Ли Жизнь На Марсе?"
____________________________________________________________________

BORDER

border: 4px solid yellow;
border-top: 6px solid green;
border-bottom-right-radius: 10px 30px;
border-radius: 50%; - получим круг
____________________________________________________________________

О FLOAT

Элементы с float не влияют на содержимое контейнера. Т.е. контейнер не растягивается в зависимости от контента, если внутренние элементы имеют float - они игнорируются.
____________________________________________________________________

О TRANSITION

transition имеет прямое отношение к анимации. У него следующие свойства:

transition-property: all;						-	к какому свойству элемента применить анимацию
transition-duration: .2s;						-	продолжительность анимации.
transition-timing-function: ease-in-out;	-	как будет выглядеть анимация, ее параметры
transition-delay: .3s;							-	задержка перед применением анимации

В сжатом виде выглядит так:
transition: background .2s ease-in-out .1s;	-	анимация применяется к фону в течение 0.2с с параметром ease-in-out с задержкой в 0.1с
-moz-transition: background .2s ease-in-out .1s;	 -	для old Mozila
-webkit-transition: background .2s ease-in-out .1s;	 -	для old Chrome
-o-transition: background .2s ease-in-out .1s;	     -	для old Opera
____________________________________________________________________

О ГРАДИЕНТАХ

background: linear-gradient(45deg,black,white);
linear-gradient(right,black,white);
linear-gradient(right top,black,white);	- у меня не работает :( Возможно, требуется Mozila.
linear-gradient(40% 50%,black,white);
radial-gradient(40% 50%,black,white);
radial-gradient(70% 80%, #333 30%, #bbb 80%);	- (corX corY, цвет какая-часть-от-общего-пространства)
radial-gradient(center, #333, #bbb);
radial-gradient(black 0%,white 120%);
-moz-radial-gradient(center, red 10%, #aaa 30, #333 70%, #bbb 70%);
radial-gradient(transparent, rgba(0,0,0,.7)) - типа виньетка
repeating-linear-gradient(-45deg, rgba(0,0,0,.3) 4px, rgba(0,0,0,.3) 8px, transparent 8px, transparent 12px); - диагональные полупрозрачные полосы
repeating-linear-gradient(-45deg, rgba(0,0,0,.3) 4px, rgba(0,0,0,.3) 8px, transparent 8px, transparent 12px), repeating-linear-gradient(45deg, rgba(0,0,0,.3) 4px, rgba(0,0,0,.3) 8px, transparent 8px, transparent 12px); - диагональная клетка. Прикольно смотрится с {transition: opacity .3s}
____________________________________________________________________

О TRANSFORM

transform: translate(30px 50px) rotate(30deg) scale(-2);
____________________________________________________________________

ОБ АНИМАЦИИ:	@keyframes

Предназначенный для анимации блок должен обязательно содержать строки (значения произвольны):
.block {
	 animation-name: spin;
	 animation-duration: 3s;
	 animation-timing-function: linear;
	animation-delay: 0s;
	 animation-iteration-count: infinite;	-	количество циклов; infinite - бесконечное повторение
	animation-direction: normal / reverse / alternate;	-	по часовой/против/по очереди
Сокр. вариант:
	animation: spin 3s  linear 0s infinite alternate;
}

.block:hover {
	animation-play-state: paused / running;}	-	управление воспроизведением

Допольнительно:
@keyframes spin {
	 from {
		  transform: rotate(0deg);
	 }
	 to {
		  transform: rotate(360deg);
	 }
}
____________________________________________________________________

О ДОБАВЛЕНИИ ШРИФТОВ		@font-face

Для добавления каждого нового шрифта нужно описывать отдельный @font-face.

@font-face {
	 font-family: PTSans;
	 src: url(ptsansd.eot); /* Сначала eot */
	 src: local('ßðδ'), /* 'имя несуществующего шрифта' на компе пользователя. Подстраховка на случай отличия начертаний шрифта на сервера и у юзера */
	 url(ptsans.woff) format('woff'),
	 url('ptsans.ttf') format('truetype'),
	 url('ptsans.svg') format('svg');
	 font-weight: normal;
	 font-style: normal;
}
@font-face {
	 font-family: PTSans;
	 src: url(ptsans_bold.eot);
	 src: local('ßðδ'),
	 url(ptsans_bold.woff) format('woff'),
	 url('ptsans_bold.ttf') format('truetype'),
	 url('ptsans_bold.svg') format('svg');
	 font-weight: bold;
	 font-style: bold;
}
____________________________________________________________________

НАПОМИНАНИЕ О КЛАССАХ

Если к нескольким классам нужно применить одинаковые стили, просто перечисли их через запятую:

.btn, .menu, #link1 {}
____________________________________________________________________

БОЙЛЕРПЛЕЙТЫ, СЕТКИ И ФРЕЙМВОРКИ

Задача CSS-Frameworks - создание начальной точки, которая позволит создавать сайты более эффективно. Важно выбрать фреймворк, наиболее подходящий под ваш проект.

boilerplate - фокусируется на предоставлении начальных страниц для создания сайтов и приложений на HTML5. Обычно предоставляет самую начальную точку проекта и фокусируется на самом передовом опыте.

frameworks - коллекция активов, которые предоставляю систему для создания сайтов. У этих систем такде есть какой-то определенный фокус, например, создание отзывчивых сайтов, разработка интерфейсов пользователя или особый подход к типографии.

grid systems - похожа на frameworks, но они имеют дело только с макетом страницы. Они предоставляют меньший набор файлов CSS, в которых есть классы только для уровней контейнеров. Несмотря на то, что некоторые из них предлагают начальные страницы и демо-файлы, они не полноценны.

bootstrap - результат выпуска twitter фреймворка с интерфейсом пользователя для создания тем страниц twitter. Хоть он немного обширнее большинства фреймворков, он не отличается кардинально от других систем.
____________________________________________________________________

ТИПЫ ФРЕЙМВОРКОВ

1. Ф. интерфейсов пользователя.
	Содержат не только CSS. У bootstrap целая коллекция файлов css, js, изображений и даже опциональные файлы шаблонов и демо. Это обычно полнофункциональные инструменты. Много лишнего, зато широкий функционал.
2. Комплексные Ф. (Foundation, Yanl, Gumby)
	Тоже пытаются предоставить полный набор инструментов, но вместо фокуса на построении всего front-end проекта, они просто пытаются контролировать больше аспектов стилизации: набор стилей для кросс-браузерной совместимости, а также стилизация частых элементов, форм, типографии и макета. Цель - позаботиться о как можно большем кол-ве аспектов дизайна за меньшее время. Также могут добавить много лишнего.
3. Минимальные (Skeleton, Kube)
	Прочная база для начала проекта, а стилизация остается полностью за дизайнером.  Могут включать основу стилизации, но > сфокусированы на постоянстве и наименьшем количестве следов.
____________________________________________________________________

Framework - набор CSS- и JS-файлов, представляющих фундамент веб-проекта. Это готовые решения, основанные на опыте множества разработчиков.
____________________________________________________________________

МЕДИАЗАПРОС

@media only screen and (max-width: 720px) - стили будут применяться, если макс. размер страницы 720px
____________________________________________________________________

О СЕТКЕ

Система css-сеток (grid system) - коллекция стилей, которая позволяет дизайнеру контроллировать макет страницы на основе использования строк и колонок. Обычно состоит из 12 или 16 колонок. Сетка мб фиксированной (ширина в px) либо резиновой (в %).
____________________________________________________________________

ФИШКИ EMMET
-------------------------------------------
Если мы хотим изменить начальное число то пишем «$@n», где n - число с которого нужно начать отсчет. Чтобы отсчет шел на уменьшение, после «$» нужно добавить «@-»

li.class$@2*3
получим
<li class="class2"></li>
<li class="class3"></li>
<li class="class4"></li>

li.class$@-2*3
получим
<li class="class4"></li>
<li class="class3"></li>
<li class="class2"></li>
-------------------------------------------

Чтобы не запутаться во вложениях, теги можно группировать:
(div>p)+(span>em)
получим

<div>
	 <p></p>
</div>
<span><em></em></span>
-------------------------------------------

ОСНОВНЫЕ ОПЕРАЦИИ В EMMET

Итак, для написания HTML в Emmet используются 12 типов селекторов:

# - создает атрибут id
. - создает атрибут class
[] - создает любые другие атрибуты, в том числе и пользовательские
> - делает переход на один уровень ниже
+ - создает соседние элементы на том же уровне
^ - делает переход на уровень вверх
* - умножает элементы
$ - заменяется числом, каждый раз увеличивающимся на единицу
$$ - то же самое, только двухзначное
{} - добавляет текстовое содержимое элементам
() - группирует элементы
: - используется для некоторых элементов, таких как <input>, <a>, <link> и др., и задает для них атрибуты
-------------------------------------------

CTRL+SHIFT+A - чтобы обернуть код

____________________________________________________________________

ОТЗЫВЧИВЫЕ ИЗОБРАЖЕНИЯ

Просто убираем ширину и высоту у изображений (атрибуты внутри тэга img) и задаем max-width:100% (можно добавить height:auto), что растянет картинку на всю ширину родительского блока.
***	  Для IE8 можно создать отдельный css-файл (customIE8.css) с указанием width:auto, иначе изображение будет растягиваться только в ширину, но не в высоту.
В html-файле добавляем строку:
<!-- [if IE 8]> <link rel="stylesheet" href="_css/customIE8.css"> <![endif] -->
____________________________________________________________________




Стили представленные позже считаются более приоритетными и перекрывают собой предыдущие.
____________________________________________________________________

Раньше:
<link href='styles.css' rel='stylesheet' type='text/css' />
Теперь:
<link href='styles.css' rel='stylesheet'>

Favicon:
<link href='favicon.ico' rel='shortcut icon'>
____________________________________________________________________

Связывание с альтернативными ресурсами.
Настройка RSS-канала:
<link rel='alternate' type='application/rss+xml' title='Wisdom Pets News' href='feed/feed.rss'>
Настройка ATOM-канала:
<link rel='alternate' type='application/atom+xml' title='Wisdom Pets News' href='feed/atom.xml'>
____________________________________________________________________

Вперед-назад:
<link href='Page3.html' rel='next'>Next page</a>
<link href='Page1.html' rel='prev'>Previous page</a>
____________________________________________________________________







Если контент размечен семантически, поисковым системам его проще индексировать и найти. Контент становится более релевантным.

<section> - обертка семантически выделенного блока, а не замена <div>.
<aside> - вспомогательная инфа. Но привычно как sidebar.
<main> - уникальный, динамичный контент.
<article> - статья, обязана содержать хотя бы 1 заголовок. Тег для однотипных элементов.
<figure> и <figcaption> - выделяют автономный контент.

details * { display: none } - применит стили ко всем внутренним элементам.

Семантическая разметка дает SEO колоссальный ПЛЮС! Просто нереальный по сравнению с обычной.
____________________________________________________________________

Родитель: line-heigth
Ребенок: vertical-align

width в % для внутр. элемен
min-height

Родитель будет ратягиваться если:
	heigth: inherit;
	overflow: hidden;

display: flex - эл-ты становятся горизонтально

'flex-basis: 10px' - аналог min-width; указывает, на каком размере элемент больше не хочет сжиматься. Чтобы это работало нормально, нужно прописать 'flex-wrap: wrap', чтобы элементы переносились на новую строку.

margin-left: 1rem;
пре|постпроцессор Gulp
маска для формы в JS

Препроцессор - это штука, кот. псевдо-код (например, less-код) преобразует в обычный CSS.

Чтобы выстроить div в линию, достаточно inline-block, без float

transition: [property] [duration] [timing-function] [delay];

• В transition рекомендуется указывать конкретное свойство вместо all, иначе браузеру приходится напрягаться, пытаясь просчитать все свойства, кот. могут измениться.
• transition устанавливается на обычное состояние, не hover.
• transition можно настраивать для неск. свойств, причем указывать им отличные параметры:
	transition: width 0.4s 0.7s, color 0.3s;

transform: scale(1.1); translate, rotate, skew
____________________________________________________________________

Все параметры воспроизведения анимации можно объединить в одном свойстве:
	{ animation: animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction; }

Для воспроизведения анимации достаточно указать только два свойства - animation-name и animation-duration, остальные свойства примут значения по умолчанию. Порядок перечисления свойств не имеет значения, единственное, время выполнения анимации animation-duration обязательно должно стоять перед задержкой animation-delay.

Свойство animation ориентируется на ключевые кадры, поэтому сначала создадим @keyframes.
	@keyframes anim_1 {
		0% 	{scale(1);}
		50%	{scale(1.1);}
		100% 	{scale(1);}
		можно записать так:
		0%, 100% {scale(1);}
	}
У нас есть заготовка, сошлемся на нее в свойстве animation элемента:
	animation: anim_1 1s infinite paused;

.test:hover { animation-play-state: running } - морозит анимацию, если убран курсор с элемента.

Для одного элемента можно задавать НЕСКОЛЬКО АНИМАЦИЙ, перечислив их названия через запятую:
	div {animation: shadow 1s ease-in-out 0.5s alternate, move 5s linear 2s;}

















____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________


____________________________________________________________________